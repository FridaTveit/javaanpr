/*
 * Copyright 2013 JavaANPR contributors
 * Copyright 2006 Ondrej Martinsky
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package net.sf.javaanpr.gui.windows;

import net.sf.javaanpr.gui.tools.FileListModelEntry;
import net.sf.javaanpr.gui.tools.ImageFileFilter;
import net.sf.javaanpr.imageanalysis.CarSnapshot;
import net.sf.javaanpr.imageanalysis.Photo;
import net.sf.javaanpr.jar.Main;
import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class FrameMain extends JFrame {

    private static final long serialVersionUID = 0L;

    private CarSnapshot car;
    private BufferedImage panelCarContent;
    private JFileChooser fileChooser;
    private DefaultListModel<FileListModelEntry> fileListModel;
    private int selectedIndex = -1;

    private JMenuItem aboutItem;
    private JLabel bottomLine;
    private JMenuItem exitItem;
    private JList<FileListModelEntry> fileList;
    private JScrollPane fileListScrollPane;
    private JMenuItem helpItem;
    private JMenu helpMenu;
    private JMenu imageMenu;
    private JMenuBar menuBar;
    private JMenuItem openItem;
    private JPanel panelCar;
    private JLabel recognitionLabel;
    private JButton recognizeButton;

    /**
     * Creates new form MainFrame.
     */
    public FrameMain() {
        this.initComponents();

        this.fileChooser = new JFileChooser();
        this.fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        this.fileChooser.setMultiSelectionEnabled(true);
        this.fileChooser.setDialogTitle("Load snapshots");
        // this.fileChooser.setFileFilter(new ImageFileFilter()); // TODO why not???

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int width = this.getWidth();
        int height = this.getHeight();
        this.setLocation((screenSize.width - width) / 2, (screenSize.height - height) / 2);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    private void initComponents() {
        Font arial11 = new Font("Arial", 0, 11);
        this.recognitionLabel = new JLabel();
        this.panelCar = new JPanel() {

            private static final long serialVersionUID = 0L;

            @Override
            public void paint(Graphics g) {
                super.paint(g);
                g.drawImage(FrameMain.this.panelCarContent, 0, 0, null);
            }
        };
        this.fileListScrollPane = new JScrollPane();
        this.fileList = new JList<FileListModelEntry>();
        this.recognizeButton = new JButton();
        this.bottomLine = new JLabel();
        this.menuBar = new JMenuBar();
        this.imageMenu = new JMenu();
        this.openItem = new JMenuItem();
        this.exitItem = new JMenuItem();
        this.helpMenu = new JMenu();
        this.aboutItem = new JMenuItem();
        this.helpItem = new JMenuItem();
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        this.setTitle("JavaANPR");
        this.setResizable(false);
        this.recognitionLabel.setBackground(new Color(0, 0, 0));
        this.recognitionLabel.setFont(new Font("Arial", 0, 24));
        this.recognitionLabel.setForeground(new Color(255, 204, 51));
        this.recognitionLabel.setHorizontalAlignment(SwingConstants.CENTER);
        this.recognitionLabel.setText(null);
        this.recognitionLabel.setBorder(BorderFactory.createEtchedBorder());
        this.recognitionLabel.setOpaque(true);
        this.panelCar.setBorder(BorderFactory.createEtchedBorder());
        GroupLayout panelCarLayout = new GroupLayout(this.panelCar);
        this.panelCar.setLayout(panelCarLayout);
        panelCarLayout.setHorizontalGroup(
                panelCarLayout.createParallelGroup(GroupLayout.LEADING).add(0, 585, Short.MAX_VALUE));
        panelCarLayout
                .setVerticalGroup(panelCarLayout.createParallelGroup(GroupLayout.LEADING).add(0, 477, Short.MAX_VALUE));
        this.fileListScrollPane.setBorder(BorderFactory.createEtchedBorder());
        this.fileListScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        this.fileList.setBackground(UIManager.getDefaults().getColor("Panel.background"));
        this.fileList.setFont(arial11);
        this.fileList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent evt) {
                FrameMain.this.fileListValueChanged(evt);
            }
        });
        this.fileListScrollPane.setViewportView(this.fileList);
        this.recognizeButton.setFont(arial11);
        this.recognizeButton.setText("Recognize plate");
        this.recognizeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                FrameMain.this.recognizeButtonActionPerformed(evt);
            }
        });
        this.bottomLine.setFont(arial11);
        this.menuBar.setFont(arial11);
        this.imageMenu.setText("Image");
        this.imageMenu.setFont(arial11);
        this.openItem.setFont(arial11);
        this.openItem.setText("Load snapshots");
        this.openItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                FrameMain.this.openItemActionPerformed(evt);
            }
        });
        this.imageMenu.add(this.openItem);
        this.exitItem.setFont(arial11);
        this.exitItem.setText("Exit");
        this.exitItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                FrameMain.this.exitItemActionPerformed(evt);
            }
        });
        this.imageMenu.add(this.exitItem);
        this.menuBar.add(this.imageMenu);
        this.helpMenu.setText("Help");
        this.helpMenu.setFont(arial11);
        this.aboutItem.setFont(arial11);
        this.aboutItem.setText("About");
        this.aboutItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                FrameMain.this.aboutItemActionPerformed(evt);
            }
        });
        this.helpMenu.add(this.aboutItem);
        this.helpItem.setFont(arial11);
        this.helpItem.setText("Help");
        this.helpItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                FrameMain.this.helpItemActionPerformed(evt);
            }
        });
        this.helpMenu.add(this.helpItem);
        this.menuBar.add(this.helpMenu);
        this.setJMenuBar(this.menuBar);
        GroupLayout layout = new GroupLayout(this.getContentPane());
        this.getContentPane().setLayout(layout); // TODO refactor
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.LEADING)
                .add(layout.createSequentialGroup().addContainerGap()
                        .add(layout.createParallelGroup(GroupLayout.TRAILING)
                                .add(GroupLayout.LEADING, this.bottomLine, GroupLayout.DEFAULT_SIZE, 589,
                                        Short.MAX_VALUE)
                                .add(GroupLayout.LEADING, this.panelCar, GroupLayout.DEFAULT_SIZE,
                                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addPreferredGap(LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(GroupLayout.TRAILING)
                                .add(this.fileListScrollPane, GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                                .add(GroupLayout.LEADING, this.recognitionLabel, GroupLayout.DEFAULT_SIZE, 190,
                                        Short.MAX_VALUE)
                                .add(this.recognizeButton, GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                        .addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.LEADING)
                .add(layout.createSequentialGroup().addContainerGap()
                        .add(layout.createParallelGroup(GroupLayout.LEADING).add(layout.createSequentialGroup()
                                .add(this.fileListScrollPane, GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.RELATED).add(this.recognizeButton)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(this.recognitionLabel, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE))
                                .add(this.panelCar, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                                        Short.MAX_VALUE)).addPreferredGap(LayoutStyle.RELATED).add(this.bottomLine)));
        this.pack();
    }

    private void helpItemActionPerformed(ActionEvent evt) {
        try {
            new FrameHelp(FrameHelp.MODE.SHOW_HELP);
        } catch (IOException e) {
            e.printStackTrace(); // TODO exception
        }
    }

    private void aboutItemActionPerformed(ActionEvent evt) {
        try {
            new FrameHelp(FrameHelp.MODE.SHOW_ABOUT);
        } catch (IOException e) {
            e.printStackTrace(); // TODO exception
        }
    }

    private void recognizeButtonActionPerformed(ActionEvent evt) {
        new RecognizeThread(this).start();
    }

    private void fileListValueChanged(ListSelectionEvent evt) {
        int selectedNow = this.fileList.getSelectedIndex();
        if ((selectedNow != -1)) {
            this.recognitionLabel.setText(this.fileListModel.elementAt(selectedNow).recognizedPlate);
            this.selectedIndex = selectedNow;
            String path = this.fileListModel.getElementAt(selectedNow).fullPath;
            new LoadImageThread(this, path).start();
        }
    }

    private void exitItemActionPerformed(ActionEvent evt) {
        System.exit(0);
    }

    private void openItemActionPerformed(ActionEvent evt) {
        int returnValue;
        returnValue = this.fileChooser.showOpenDialog((Component) evt.getSource());
        if (returnValue != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File[] selectedFiles = this.fileChooser.getSelectedFiles();
        this.fileListModel = new DefaultListModel<FileListModelEntry>();
        for (File selectedFile : selectedFiles) {
            if (selectedFile.isFile()) {
                this.fileListModel
                        .addElement(new FileListModelEntry(selectedFile.getName(), selectedFile.getAbsolutePath()));
            } else if (selectedFile.isDirectory()) {
                for (String fileName : selectedFile.list()) {
                    if (ImageFileFilter.accept(fileName)) {
                        this.fileListModel
                                .addElement(new FileListModelEntry(fileName, selectedFile + File.separator + fileName));
                    }
                }
            }
        }
        this.fileList.setModel(this.fileListModel);
    }

    public class RecognizeThread extends Thread {
        private FrameMain parentFrame = null;

        public RecognizeThread(FrameMain parentFrame) {
            this.parentFrame = parentFrame;
        }

        private void setFailedAndPrintStackTrace(Exception exception) {
            this.parentFrame.recognitionLabel.setText("failed");
            exception.printStackTrace();
        }

        @Override
        public void run() {
            String recognizedText = "";
            this.parentFrame.recognitionLabel.setText("processing...");
            int index = this.parentFrame.selectedIndex;
            try {
                recognizedText = Main.systemLogic.recognize(this.parentFrame.car, false);
                this.parentFrame.recognitionLabel.setText(recognizedText);
                this.parentFrame.fileListModel.elementAt(index).recognizedPlate = recognizedText;
            } catch (IllegalArgumentException exception) {
                setFailedAndPrintStackTrace(exception);
            } catch (IOException exception) {
                setFailedAndPrintStackTrace(exception);
            }
        }
    }

    public class LoadImageThread extends Thread {
        private FrameMain parentFrame = null;
        private String url = null;

        public LoadImageThread(FrameMain parentFrame, String url) {
            this.parentFrame = parentFrame;
            this.url = url;
        }

        @Override
        public void run() {
            try {
                this.parentFrame.car = new CarSnapshot(this.url);
                this.parentFrame.panelCarContent = this.parentFrame.car.duplicate().getImage();
                this.parentFrame.panelCarContent =
                        Photo.linearResizeBi(this.parentFrame.panelCarContent, this.parentFrame.panelCar.getWidth(),
                                this.parentFrame.panelCar.getHeight());
                this.parentFrame.panelCar.paint(this.parentFrame.panelCar.getGraphics());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
